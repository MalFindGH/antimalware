# Ask the user for the file path using a console prompt
$scanfile = Read-Host "Enter the file path to scan:"

# Check if the provided file path is valid
if (-not (Test-Path $scanfile)) {
    Write-Host "Invalid file path. Please provide a valid path."
    exit 1
}

# Initialize the variable to keep track of the malware score
$malware_score = 0

# Read the contents of the file
try {
    $fileContent = Get-Content -Path $scanfile -Raw
}
catch {
    Write-Host "Error reading the file: $_"
    exit 1
}

# List of strings to search for in the file
$malicious_strings = @(
    "9; ;&;85",
    "2=018efg",
    "91&8=:",
    "<=gael",
    "93gadd",
    "efg`ab",
    "dWLuG@rPMFWAVQ",
    "eJMQVuWXjGPG",
    "oqkgaPCUNGP",
    "AMORCVK@NG",
    "5::=1fdef",
    "5::=1fdeg",
    "5::=1fdeb",
    "5::=1fdea",
    "kLDMrCVJ",
    "LGVQNKLI",
    "vPKFGLV",
    "dKPGDMZ",
    "lKeeGpF",
    "aGLVGP",
    "Service Control Manager", # ProcessHacker
    "NtTraceControl", # ProcessHacker
    "SELECT host, path, isSecure, expiry, name, value FROM moz_cookies", # AZORult
    "%s	TRUE	%s	%s	%s	%s	%s", # Clipper
    "ffcookies.txt", # Raccoon Stealer
    "Unable to search for handles because the total number of handles on the system is too large. Please check if there are any processes with an extremely large number of handles open.",
    "The process will be restarted with the same command line and working directory, but if it is running under a different user it will be restarted under the current user.",
    "The process is 32-bit, but the 32-bit version of Process Hacker could not be located. A 64-bit dump will be created instead. Do you want to continue?",
    "KProcessHacker does not support your operating system or could not be loaded. Make sure Process Hacker is running with administrative privileges.",
    "This filter cannot function because digital signature checking is not enabled. Enable it in Options > Advanced and restart Process Hacker.",
    "One or more options you have changed requires a restart of Process Hacker. Do you want to restart Process Hacker now?",
    "You will need to provide administrator permission. Click Continue to complete this operation.",
    "Plugins are not enabled. To use plugins enable them in Options and restart Process Hacker.",
    "All images are being forcibly relocated (regardless of whether they support ASLR).",
    "Deleting a service can prevent the system from starting or functioning properly.",
    "Type the name of a program that will be opened under standard user privileges.",
    "Type the name of a program that will be opened under alternate credentials.",
    "Images with a Low mandatory label cannot be loaded into the process.",
    "Include CPU (and other) usage of children in collapsed processes",
    "Unable to create a process structure for the selected process.",
    "Unable to open file properties because the object is unnamed.",
    "Do you want to reset all settings and restart Process Hacker?",
    "Unable to open file location because the object is unnamed.",
    "Image is probably packed (%u imports over %u modules).",
    "DLLs that were not loaded at their preferred image bases.",
    "This feature is not supported by your operating system.",
    "Enter the command to start as the specified user.",
    "Thread is waiting for work from a worker factory:",
    "Unable to open key because the object is unnamed.",
    "Unable to create the system information window",
    "Thread is waiting for an I/O completion port:",
    "Changes may require a restart to take effect.",
    "Process created: %s (%u) started by %s (%u)",
    "The process %s (%u) was created by %s (%u)",
    "Only Windows Store signatures are allowed.",
    "Resolve addresses for network connections",
    "Donors - thank you for your support!",
    "ntdll.dll!NtWaitForWorkViaWorkerFactory",
    "[fail]: readers active in write zone!",
    "Handle 0x%Ix: (error querying handle)",
    "The service %s (%s) has been created.",
    "The service %s (%s) has been started.",
    "Unable to create the minidump thread",
    "[fail]: writers active in read zone!",
    "kernel32.dll!WaitForMultipleObjects",
    "ntdll.dll!NtSetLowWaitHighEventPair",
    "ntdll.dll!ZwSetHighWaitLowEventPair",
    "ntdll.dll!ZwAlpcSendWaitReceivePort",
    "ntdll.dll!ZwSetLowWaitHighEventPair",
    "Thread is waiting for an ALPC port:",
    "ntdll.dll!NtSetHighWaitLowEventPair",
    "ntdll.dll!NtAlpcSendWaitReceivePort",
    "ntdll.dll!NtWaitForMultipleObjects",
    "Unable to create the search thread",
    "PhGetFilterSupportProcessTreeList",
    "PhGetFilterSupportServiceTreeList",
    "Thread is waiting for a LPC port:",
    "PhGetFilterSupportNetworkTreeList",
    "kernel32.dll!WaitForSingleObject",
    "ntdll.dll!NtRequestWaitReplyPort",
    "PhInitializeTreeNewFilterSupport",
    "ntdll.dll!NtReplyWaitReceivePort",
    "ntdll.dll!ZwRequestWaitReplyPort",
    "ProcessHacker.exe",
    "Search engine:", # PUA.IOBit
    "HideOnMinimize", # PUA.IOBit
    "Pfv0%fv", # Generic Malware
    "5C5P5d5",
    "1 252<2",
    "zfv_Ifv",
    "hvyPfv"
    
    
    # Add more strings here if needed
)

# List of safe strings to search for in the file
$safe_strings = @(
    "t#fD9>t", # Apache Software Foundation
    "CRYPTBASE.dll", # sqlite
    "Netlogon", # libgame
    "FailureActionsOnNonCrashFailures", # .NET Libraries
    "Set default quota limits", # Wireshark, ProcessHacker
    "Peak virtual size", # Wireshark, ProcessHacker
    "Create domain", # Wireshark, ProcessHacker
    "Remove member", # Wireshark, ProcessHacker
    "Base address", # Wireshark, ProcessHacker
    "Create alias", # Wireshark, ProcessHacker
    "Virtual size", # Wireshark, ProcessHacker
    "Count: %u", # Wireshark, ProcessHacker
    "Flags: %u", # Wireshark, ProcessHacker
    "fvaRfv", # Indigo Rose Corporation
    "MprmsgGetErrorString" # Symantec Corporation
    
    # Add more safe strings here if needed
)

# Loop through the list of malicious strings and check if they exist in the file
foreach ($malicious_string in $malicious_strings) {
    $count = ($fileContent | Select-String -Pattern $malicious_string -AllMatches).Matches.Count
    if ($count -gt 0) {
        $malware_score += $count
         Write-Host "Found $count occurrence(s) of '$malicious_string' in the file."
    }
}

# Loop through the list of safe strings and check if they exist in the file
foreach ($safe_string in $safe_strings) {
    $count = ($fileContent | Select-String -Pattern $safe_string -AllMatches).Matches.Count
    if ($count -gt 0) {
        $malware_score -= $count
        Write-Host "Found $count occurrence(s) of '$safe_string' in the file. Subtracting 1 from malware_score."
    }
}

# Display the final malware score
Write-Host "Ranges:

Clean: 0-25
Suspicious: 25-45
Malicious: 45-100
"
Write-Host "Malware score: is $malware_score."
