# Ask the user for the file path using a console prompt
$scanfile = Read-Host "Enter the file path to scan (raw format):"

# Check if the provided file path is valid
if (-not (Test-Path $scanfile)) {
    Write-Host "Invalid file path. Please provide a valid path."
    exit 1
}

# Initialize the variable to keep track of the malware score
$malware_score = 0

# Read the contents of the file
try {
    $fileContent = Get-Content -Path $scanfile -Raw
}
catch {
    Write-Host "Error reading the file: $_"
    exit 1
}

# List of strings to search for in the file
$malicious_strings = @(
    "5B5H5j5~5",
    "kErnel32",
    "C:\log\%s.txt",
    "C:\log\%s.log",
    "https://otuyt.oudingsoft.com/?3eaf11=9bb6d3be54c6ebc8aaf1641317dcdf37&456a6f=",
    "https://otuyt.oudingsoft.com/?3eaf11=3426f74426bbdcef4436712c5eefb3ee&456a6f=",
    "https://otuyt.oudingsoft.com/?3eaf11=5bab2f97a90656b47c8f70dcb6bc9a71&456a6f=",
    "https://otuyt.oudingsoft.com/?3eaf11=0fa783cd39c6d7939aba821a4648a7be&456a6f=",
    "https://otuyt.oudingsoft.com/?3eaf11=9683b9dc38c94eff575f9e3e65783781&456a6f=",
    "https://otuyt.oudingsoft.com/?3eaf11=69350cc65c60fd386f6f9c2e5ca946f9",
    "e:\gitlab\pdfconvert_jike\thirdparty\openssl\ssl\packet_local.h",
    ".?AVCRunStartServiceCmd@@",
    "not sport de string",
    "not sport string",
    ".?AVCHttpPageClient@@",
    ";7<L<U<^<t<",
    "&f5476f=af0704f00cdbe817ad08e006e266bb4e",
    ".?AVCRunMemoryCmd@@",
    "WindowsResetMaster",
    "7'757:7?7L7P7Z7",
    "1'151:1?1L1P1Z1",
    "4'454:4?4L4P4Z4",
    "888B8N8X8d8n8z8",
    "7(7=7E7K7`7}7",
    "1,0,2,305101",
    ";K=R=Z=b=j=",
    "5F5S5d5q5{5",
    "2F2S2d2q2{2",
    "7/8M8+9d9",
    "kilf1.exe",
    "2(2=2C2U2\2a2l2",
    "@.links",
    "UT]QSVR^1",
    "YVWQ[R^",
    "SSP_jmW",
    "glePro",
    "8_VX^[]",
    "_][VX^",
    "<xap:CreatorTool>Adobe Photoshop 7.0</xap:CreatorTool>",
    "f:\workplace\c++\hannibal\release\hannibal.pdb",
    "<xapMM:DocumentID>adobe:docid:photoshop:e4a3f931-627e-11dc-ba81-9bfb3cc4cbdf</xapMM:DocumentID>",
    "<xapMM:InstanceID>uuid:471bf83a-627f-11dc-ba81-9bfb3cc4cbdf</xapMM:InstanceID>",
    "<exif:DateTimeDigitized>2006-10-12T01:05:52Z</exif:DateTimeDigitized>",
    "<exif:DateTimeOriginal>2006-10-12T01:05:52Z</exif:DateTimeOriginal>",
    "<exif:CompressedBitsPerPixel>8/1</exif:CompressedBitsPerPixel>",
    "<exif:ExposureBiasValue>0/10</exif:ExposureBiasValue>",
    "<xap:ModifyDate>2007-09-13T21:59:30Z</xap:ModifyDate>",
    "<exif:MaxApertureValue>48/16</exif:MaxApertureValue>",
    "<tiff:YCbCrPositioning>2</tiff:YCbCrPositioning>",
    "<exif:ExposureProgram>2</exif:ExposureProgram>",
    "<exif:ExposureTime>10/80</exif:ExposureTime>",
    "<exif:FocalLength>79/10</exif:FocalLength>",
    "!This program cannot be run in D0S mode.",
    "<exif:Saturation>0</exif:Saturation>",
    "<exif:FNumber>28/10</exif:FNumber>",
    "<exif:Sharpness>0</exif:Sharpness>",
    "<tiff:Model>DSC-P150</tiff:Model>",
    "<exif:Contrast>0</exif:Contrast>",
    "<tiff:Make>SONY</tiff:Make>",
    "<exif:Mode>2</exif:Mode>",
    "<rdf:li>320</rdf:li>",
    "2008:07:15 11:00:54",
    "2006:10:12 01:05:52",
    "%sWallPapers.jpg",
    "%sreadme.1xt",
    "_ZmBRkm>Ei^",
    "YYuTVWhyt@",
    "%swindows\",
    "ZWwX0yZwY",
    "h)A_Pd*2*",
    ",c[VF's3s",
    "7,c.]Opv~",
    "G	g[}N}{{",
    "Ouc*UcZ:4",
    "4.5.7.9",
    "rR)z{JG",
    "N24^u#",
    "_8Yt58CHX",
    "aGgu{1",
    "j>}I8=",
    "Z={xCz",
    "\nuR\noisreVtnerruC\swodniW\tfosorciM\erawtfoS",
    "/create /f /sc ONLOGON /RL HIGHEST /tn "'",
    "--donate-level=",
    "{0}\FileZilla\recentservers.xml",
    "{0}\FileZilla\sitemanager.xml",
    "ListOfPrograms",
    "bMasterKey",
    "EntityTUwSystem.ServiceModel.SessionMode, System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
    "System.Collections.Generic.IEnumerable<Entity5>.GetEnumerator",
    "System.Collections.Generic.IEnumerator<Entity5>.get_Current",
    "System.Collections.Generic.IEnumerator<Entity5>.Current",
    "NordVpn.exe*NoGetDirectoriesrd",
    "<encrypted_key>k__BackingField",
    "set_encrypted_key",
    "get_encrypted_key",
    "loginPairs",
    "chromeKey",
    "AFileSystemntivFileSystemirusPrFileSystemoduFileSystemct|AntiFileSystemSpyWFileSystemareProFileSystemduct|FireFileSystemwallProdFileSystemuct",
    "//settinString.Removeg[@name=\PasswString.Removeord\]/valuString.RemoveeROOT\SecurityCenter",
    "<GetWindowsVersion>g__HKLM_GetString|11_0",
    "93D9D319FF04F5E54F3A6431407A7B90388FDC54",
    "7FD227EEE2F38A50CFD286D228B794575C0025FB",
    "8C550EA96A693C687FFAB21F3B1A5F835E23E3B3",
    "BCEF86DAFC99BA02019A51909C079A7A31931909",
    "A898408AA9A30B686240D921FE0E3E3A01EE91A5",
    "1938FDF81D9EFE09E9786A7A7DDFFBD755961098",
    "99086C63443EF4224B60D2ED08447C082E7A0484",
    "FB10FF1AD09FE8F5CA3A85B06BC96596AF83B350",
    "FCEAB39EEBEA9BEA6AC370A00D87E5EE20EC94F3",
    "718D1294A5C2D3F3D70E09F2F473155C4F567201",
    "410D551BF9DC1F0CF262E4DB1077795D56EEC026",
    "1A79939AEFF161E557D02CB37CD9A811ABCAF458",
    "06F9FDEBE7AEF3F08523BDDDE7FCB7F4A217E7B3",
    "6353B688B99A3543932AA127DAA0E48FBC646BBD",
    "<GetDefaultIPv4Address>b__1_1",
    "autofillProfilesTotal of RAMVPEntity12N",
    "<GetDefaultIPv4Address>b__1_0",
    "<PassedPaths>k__BackingField",
    "windows-1251, CommandLine:",
    "<AvailableLanguages>b__9_0",
    "<os_crypt>k__BackingField",
    "[^\u0020-\u007F]UNKNOWN",
    "<irrpre>k__BackingField",
    "<ListOfPrograms>b__8_0",
    "<Id10>k__BackingField",
    "<Id13>k__BackingField",
    "<Id15>k__BackingField",
    "<Id14>k__BackingField",
    "<Id12>k__BackingField",
    "GetDefaultIPv4Address",
    "GetVirtualDisplaySize",
    "<Id16>k__BackingField",
    "<Id11>k__BackingField",
    "<Id4>k__BackingField",
    "<Id5>k__BackingField",
    "ChromeGetRoamingName",
    "<Id9>k__BackingField",
    "<Id8>k__BackingField",
    "<Id6>k__BackingField",
    "<Id7>k__BackingField",
    "<DomainExists>b__0_1",
    "<DomainExists>b__0_0",
    "ReadMasterOfContext",
    "ChromeGetLocalName",
    "<scannedfiles>5__1",
    "<DomainExists>b__2",
    "<WriteLine>b__1_0",
    "ReadContextValue",
    "ReadContextTable",
    "asdasod9234oasd",
    "get_PassedPaths",
    "set_PassedPaths",
    "adkasd8u3hbasd",
    "kasdihbfpfduqw",
    "\Program Data\",
    "RegionsCountry",
    "asdaid9h24kasd",
    "ChromeGetName",
    "<Id1>b__0_12",
    "<Id1>b__0_10",
    "get_os_crypt",
    "browserPaths",
    "set_os_crypt",
    "sdfm83kjasd",
    "<Id1>b__0_8",
    "sdfk83hkasd",
    "asdlasd9h34",
    "sdkf9h234as",
    "<Id1>b__0_2",
    "kkdhfakdasd",
    "asdoiad0123",
    "<Id1>b__0_6",
    "<Id1>b__0_0",
    "remoteTasks",
    "GatherValue"
    
    # Add more strings here if needed
)

# Loop through the list of malicious strings and check if they exist in the file
foreach ($malicious_string in $malicious_strings) {
    $count = ($fileContent | Select-String -Pattern $malicious_string -AllMatches).Matches.Count
    if ($count -gt 0) {
        $malware_score += $count
        Write-Host "Found $count occurrence(s) of '$malicious_string' in the file."
    }
}

# Display the final malware score
Write-Host "Ranges:

Clean: 0-25
Suspicious: 25-45
Malicious: 45-100
"
Write-Host "Malware score: is $malware_score."
