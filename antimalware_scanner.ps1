$directoryPath = "C:\JMEK"
$downloadUrl = "http://example.com/file-to-download.ext"
$downloadFileName = "downloaded-file.ext"
$hashFilePath = "C:\hashes.txt"

# Create the directory
New-Item -ItemType Directory -Path $directoryPath -Force | Out-Null

# Download the file
$downloadPath = Join-Path -Path $directoryPath -ChildPath $downloadFileName
Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath

# Retrieve hashes from the hash file
$hashes = @{}
Get-Content $hashFilePath | ForEach-Object {
    $line = $_.Trim()
    if ($line -match "'(?<hash>[^']+)'\s*=\s*'(?<name>[^']+)'") {
        $hashes[$matches['hash']] = $matches['name']
    }
}

# Function to compute the SHA512 hash of a file
function Get-FileHashSHA512($filePath) {
    $fileStream = [System.IO.File]::OpenRead($filePath)
    $hashAlgorithm = [System.Security.Cryptography.SHA512]::Create()
    $hashBytes = $hashAlgorithm.ComputeHash($fileStream)
    $fileStream.Close()
    $hashAlgorithm.Dispose()

    $hashString = [System.BitConverter]::ToString($hashBytes).Replace("-", "").ToLower()
    return $hashString
}

# Function to recursively scan files and compare hashes
function ScanFiles($path) {
    Get-ChildItem -Path $path -Recurse | ForEach-Object {
        if (-not $_.PSIsContainer) {
            $filePath = $_.FullName
            $fileHash = Get-FileHashSHA512 $filePath

            if ($hashes.ContainsKey($fileHash)) {
                $fileName = $hashes[$fileHash]
                Write-Host "File: $filePath | Hash: $fileHash | Name: $fileName"
            }
        }
    }
}

# Start scanning the C: drive
ScanFiles "C:\"
