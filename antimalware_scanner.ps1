# Ask the user for the file path using a console prompt
$scanfile = Read-Host "Enter the file path to scan:"

# Check if the provided file path is valid
if (-not (Test-Path $scanfile)) {
    Write-Host "Invalid file path. Please provide a valid path."
    exit 1
}

# Initialize the variable to keep track of the malware score
$malware_score = 0

# Read the contents of the file
try {
    $fileContent = Get-Content -Path $scanfile -Raw
}
catch {
    Write-Host "Error reading the file: $_"
    exit 1
}

# List of strings to search for in the file
$malicious_strings = @(
    "9; ;&;85",
    "2=018efg",
    "91&8=:",
    "<=gael",
    "93gadd",
    "efg`ab",
    "dWLuG@rPMFWAVQ",
    "eJMQVuWXjGPG",
    "oqkgaPCUNGP",
    "AMORCVK@NG",
    "5::=1fdef",
    "5::=1fdeg",
    "5::=1fdeb",
    "5::=1fdea",
    "kLDMrCVJ",
    "LGVQNKLI",
    "vPKFGLV",
    "dKPGDMZ",
    "lKeeGpF",
    "aGLVGP",
    "Service Control Manager", # ProcessHacker
    "NtTraceControl", # ProcessHacker
    "SELECT host, path, isSecure, expiry, name, value FROM moz_cookies", # AZORult
    "%s	TRUE	%s	%s	%s	%s	%s", # Clipper
    "ffcookies.txt" # Raccoon Stealer
    
    # Add more strings here if needed
)

# List of safe strings to search for in the file
$safe_strings = @(
    "t#fD9>t", # Apache Software Foundation
    "CRYPTBASE.dll", # sqlite
    "Netlogon", # libgame
    "FailureActionsOnNonCrashFailures" # .NET Libraries
    
    # Add more safe strings here if needed
)

# Loop through the list of malicious strings and check if they exist in the file
foreach ($malicious_string in $malicious_strings) {
    $count = ($fileContent | Select-String -Pattern $malicious_string -AllMatches).Matches.Count
    if ($count -gt 0) {
        $malware_score += $count
         Write-Host "Found $count occurrence(s) of '$malicious_string' in the file."
    }
}

# Loop through the list of safe strings and check if they exist in the file
foreach ($safe_string in $safe_strings) {
    $count = ($fileContent | Select-String -Pattern $safe_string -AllMatches).Matches.Count
    if ($count -gt 0) {
        $malware_score -= $count
        Write-Host "Found $count occurrence(s) of '$safe_string' in the file. Subtracting 1 from malware_score."
    }
}

# Display the final malware score
Write-Host "Ranges:

Clean: 0-25
Suspicious: 25-45
Malicious: 45-100
"
Write-Host "Malware score: is $malware_score."
