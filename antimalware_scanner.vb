Imports System.IO
Imports System.Security.Cryptography

Public Class Form1
    Private fileWatcher As FileSystemWatcher
    Private maliciousHashes As New List(Of HashWithDetection)()

    ' Initialize the malicious hashes database (You should populate this list with actual malicious hashes and their detection names)
    Private Sub InitializeMaliciousHashes()
        ' Add the malicious hashes along with their detection names
        maliciousHashes.Add(New HashWithDetection("SampleMaliciousHash1", "MalwareTypeA"))
        maliciousHashes.Add(New HashWithDetection("SampleMaliciousHash2", "MalwareTypeB"))
        ' Add more malicious hashes with detection names here
    End Sub

    ' Class to store hash and detection name together
    Private Class HashWithDetection
        Public Property Hash As String
        Public Property DetectionName As String

        Public Sub New(ByVal hash As String, ByVal detectionName As String)
            Me.Hash = hash
            Me.DetectionName = detectionName
        End Sub
    End Class

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        ' Initialize the FileSystemWatcher and set the directory to monitor
        fileWatcher = New FileSystemWatcher("C:\Path\To\Your\Directory")

        ' Subscribe to the event handler for Changed event
        AddHandler fileWatcher.Changed, AddressOf OnFileChanged

        ' Enable the watcher to start raising events
        fileWatcher.EnableRaisingEvents = True

        ' Initialize the malicious hashes database
        InitializeMaliciousHashes()
    End Sub

    Private Sub OnFileChanged(sender As Object, e As FileSystemEventArgs)
        ' Check if the file change is due to a modification (other types like creation, deletion, etc., are possible)
        If e.ChangeType = WatcherChangeTypes.Changed Then
            ' Calculate the hash of the changed file
            Dim fileHash As String = CalculateFileHash(e.FullPath)

            ' Use Select Case to handle different cases based on the file's hash and its associated detection name
            Select Case fileHash
                Case In maliciousHashes.Select(Function(x) x.Hash)
                    Dim detectionName As String = maliciousHashes.First(Function(x) x.Hash = fileHash).DetectionName
                    ' Perform actions based on the detection name (e.g., log, alert, delete, etc.)
                    DeleteFile(e.FullPath, detectionName)
            End Select
        End If
    End Sub

    Private Function CalculateFileHash(filePath As String) As String
        ' Calculate the MD5 hash of the file
        Using md5 As MD5 = MD5.Create()
            Using stream As FileStream = File.OpenRead(filePath)
                Dim hashBytes As Byte() = md5.ComputeHash(stream)
                Return BitConverter.ToString(hashBytes).Replace("-", "").ToLower()
            End Using
        End Using
    End Function

    Private Sub DeleteFile(filePath As String, detectionName As String)
        ' Perform the action to delete the file
        Try
            File.Delete(filePath)
            ' You can log, show a message box, or take any other action based on the detection name
            ' For example, MessageBox.Show("Detected '" & detectionName & "' malware in the file: " & filePath)
        Catch ex As Exception
            ' Handle any exception that occurs while deleting the file
            MessageBox.Show("Error deleting the file: " & ex.Message)
        End Try
    End Sub
End Class
